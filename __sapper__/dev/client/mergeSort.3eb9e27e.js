function getMergeSortAnimations(array) {
  const animations = [];
  if (array.length <= 1) return array;
  const auxiliaryArray = array.slice();
  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);
  return animations;
}

function mergeSortHelper(
  mainArray,
  startIdx,
  endIdx,
  auxiliaryArray,
  animations,
) {
  if (startIdx === endIdx) return;
  const middleIdx = Math.floor((startIdx + endIdx) / 2);
  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);
  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);
  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);
}

function doMerge(
  mainArray,
  startIdx,
  middleIdx,
  endIdx,
  auxiliaryArray,
  animations,
) {
  let k = startIdx;
  let i = startIdx;
  let j = middleIdx + 1;
  let partition = [0.25, 0.5, 0.75];
  partition = partition.map(item=>Math.floor(mainArray.length*item));
  while (i <= middleIdx && j <= endIdx) {
    if (!partition.includes(middleIdx)) {
      animations.push([i, j, true]);
      animations.push([i, j, true]);
    }
    if (auxiliaryArray[i] <= auxiliaryArray[j]) {
      animations.push([k, k, true]);
      animations.push([k, auxiliaryArray[i], false]);
      animations.push([k, k, true]);
      mainArray[k++] = auxiliaryArray[i++];
    } else {
      animations.push([k, k, true]);
      animations.push([k, auxiliaryArray[j], false]);
      animations.push([k, k, true]);
      mainArray[k++] = auxiliaryArray[j++];
    }
  }
  while (i <= middleIdx) {
    animations.push([k, auxiliaryArray[i], false]);
    mainArray[k++] = auxiliaryArray[i++];
  }
  while (j <= endIdx) {
    animations.push([k, auxiliaryArray[j], false]);
    mainArray[k++] = auxiliaryArray[j++];
  }
}

export { getMergeSortAnimations };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVyZ2VTb3J0LjNlYjllMjdlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL3NvcnRpbmdBbGdvcml0aG1zL21lcmdlU29ydC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZ2V0TWVyZ2VTb3J0QW5pbWF0aW9ucyhhcnJheSkge1xuICBjb25zdCBhbmltYXRpb25zID0gW107XG4gIGlmIChhcnJheS5sZW5ndGggPD0gMSkgcmV0dXJuIGFycmF5O1xuICBjb25zdCBhdXhpbGlhcnlBcnJheSA9IGFycmF5LnNsaWNlKCk7XG4gIG1lcmdlU29ydEhlbHBlcihhcnJheSwgMCwgYXJyYXkubGVuZ3RoIC0gMSwgYXV4aWxpYXJ5QXJyYXksIGFuaW1hdGlvbnMpO1xuICByZXR1cm4gYW5pbWF0aW9ucztcbn1cblxuZnVuY3Rpb24gbWVyZ2VTb3J0SGVscGVyKFxuICBtYWluQXJyYXksXG4gIHN0YXJ0SWR4LFxuICBlbmRJZHgsXG4gIGF1eGlsaWFyeUFycmF5LFxuICBhbmltYXRpb25zLFxuKSB7XG4gIGlmIChzdGFydElkeCA9PT0gZW5kSWR4KSByZXR1cm47XG4gIGNvbnN0IG1pZGRsZUlkeCA9IE1hdGguZmxvb3IoKHN0YXJ0SWR4ICsgZW5kSWR4KSAvIDIpO1xuICBtZXJnZVNvcnRIZWxwZXIoYXV4aWxpYXJ5QXJyYXksIHN0YXJ0SWR4LCBtaWRkbGVJZHgsIG1haW5BcnJheSwgYW5pbWF0aW9ucyk7XG4gIG1lcmdlU29ydEhlbHBlcihhdXhpbGlhcnlBcnJheSwgbWlkZGxlSWR4ICsgMSwgZW5kSWR4LCBtYWluQXJyYXksIGFuaW1hdGlvbnMpO1xuICBkb01lcmdlKG1haW5BcnJheSwgc3RhcnRJZHgsIG1pZGRsZUlkeCwgZW5kSWR4LCBhdXhpbGlhcnlBcnJheSwgYW5pbWF0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGRvTWVyZ2UoXG4gIG1haW5BcnJheSxcbiAgc3RhcnRJZHgsXG4gIG1pZGRsZUlkeCxcbiAgZW5kSWR4LFxuICBhdXhpbGlhcnlBcnJheSxcbiAgYW5pbWF0aW9ucyxcbikge1xuICBsZXQgayA9IHN0YXJ0SWR4O1xuICBsZXQgaSA9IHN0YXJ0SWR4O1xuICBsZXQgaiA9IG1pZGRsZUlkeCArIDE7XG4gIGxldCBwYXJ0aXRpb24gPSBbMC4yNSwgMC41LCAwLjc1XVxuICBwYXJ0aXRpb24gPSBwYXJ0aXRpb24ubWFwKGl0ZW09Pk1hdGguZmxvb3IobWFpbkFycmF5Lmxlbmd0aCppdGVtKSlcbiAgd2hpbGUgKGkgPD0gbWlkZGxlSWR4ICYmIGogPD0gZW5kSWR4KSB7XG4gICAgaWYgKCFwYXJ0aXRpb24uaW5jbHVkZXMobWlkZGxlSWR4KSkge1xuICAgICAgYW5pbWF0aW9ucy5wdXNoKFtpLCBqLCB0cnVlXSk7XG4gICAgICBhbmltYXRpb25zLnB1c2goW2ksIGosIHRydWVdKTtcbiAgICB9XG4gICAgaWYgKGF1eGlsaWFyeUFycmF5W2ldIDw9IGF1eGlsaWFyeUFycmF5W2pdKSB7XG4gICAgICBhbmltYXRpb25zLnB1c2goW2ssIGssIHRydWVdKTtcbiAgICAgIGFuaW1hdGlvbnMucHVzaChbaywgYXV4aWxpYXJ5QXJyYXlbaV0sIGZhbHNlXSk7XG4gICAgICBhbmltYXRpb25zLnB1c2goW2ssIGssIHRydWVdKTtcbiAgICAgIG1haW5BcnJheVtrKytdID0gYXV4aWxpYXJ5QXJyYXlbaSsrXTtcbiAgICB9IGVsc2Uge1xuICAgICAgYW5pbWF0aW9ucy5wdXNoKFtrLCBrLCB0cnVlXSk7XG4gICAgICBhbmltYXRpb25zLnB1c2goW2ssIGF1eGlsaWFyeUFycmF5W2pdLCBmYWxzZV0pO1xuICAgICAgYW5pbWF0aW9ucy5wdXNoKFtrLCBrLCB0cnVlXSk7XG4gICAgICBtYWluQXJyYXlbaysrXSA9IGF1eGlsaWFyeUFycmF5W2orK107XG4gICAgfVxuICB9XG4gIHdoaWxlIChpIDw9IG1pZGRsZUlkeCkge1xuICAgIGFuaW1hdGlvbnMucHVzaChbaywgYXV4aWxpYXJ5QXJyYXlbaV0sIGZhbHNlXSk7XG4gICAgbWFpbkFycmF5W2srK10gPSBhdXhpbGlhcnlBcnJheVtpKytdO1xuICB9XG4gIHdoaWxlIChqIDw9IGVuZElkeCkge1xuICAgIGFuaW1hdGlvbnMucHVzaChbaywgYXV4aWxpYXJ5QXJyYXlbal0sIGZhbHNlXSk7XG4gICAgbWFpbkFycmF5W2srK10gPSBhdXhpbGlhcnlBcnJheVtqKytdO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQU8sU0FBUyxzQkFBc0IsQ0FBQyxLQUFLLEVBQUU7QUFDOUMsRUFBRSxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUM7QUFDeEIsRUFBRSxJQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFLE9BQU8sS0FBSyxDQUFDO0FBQ3RDLEVBQUUsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3ZDLEVBQUUsZUFBZSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsY0FBYyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQzFFLEVBQUUsT0FBTyxVQUFVLENBQUM7QUFDcEIsQ0FBQztBQUNEO0FBQ0EsU0FBUyxlQUFlO0FBQ3hCLEVBQUUsU0FBUztBQUNYLEVBQUUsUUFBUTtBQUNWLEVBQUUsTUFBTTtBQUNSLEVBQUUsY0FBYztBQUNoQixFQUFFLFVBQVU7QUFDWixFQUFFO0FBQ0YsRUFBRSxJQUFJLFFBQVEsS0FBSyxNQUFNLEVBQUUsT0FBTztBQUNsQyxFQUFFLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hELEVBQUUsZUFBZSxDQUFDLGNBQWMsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUM5RSxFQUFFLGVBQWUsQ0FBQyxjQUFjLEVBQUUsU0FBUyxHQUFHLENBQUMsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFVBQVUsQ0FB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
