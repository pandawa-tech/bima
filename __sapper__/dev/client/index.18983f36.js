import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_each_argument, a as validate_slots, o as onMount, e as element, c as claim_element, b as children, f as detach_dev, g as attr_dev, h as set_style, j as add_location, k as insert_dev, l as space, t as text, q as query_selector_all, m as claim_space, n as claim_text, p as append_dev, r as listen_dev, u as prop_dev, w as noop, x as destroy_each, y as run_all, z as globals } from './client.2452c61f.js';

function isMobile() {
    if (typeof window === "undefined") {
        return false;
    }
    if (
        /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
            navigator.userAgent
        )
    ) {
        return true;
    } else {
        return false;
    }
}

/* src/routes/index.svelte generated by Svelte v3.37.0 */

const { document: document_1 } = globals;
const file = "src/routes/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	child_ctx[14] = i;
	return child_ctx;
}

// (178:2) {#each array as value, idx}
function create_each_block(ctx) {
	let div;

	const block = {
		c: function create() {
			div = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, key: true, style: true });
			children(div).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "array-bar svelte-1t69iha");
			attr_dev(div, "key", /*idx*/ ctx[14]);
			set_style(div, "width", `${ARRAY_BARS_WIDTH}px`);
			set_style(div, "height", `${/*value*/ ctx[12]}px`);
			add_location(div, file, 178, 4, 5162);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*array*/ 4) {
				set_style(div, "height", `${/*value*/ ctx[12]}px`);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(178:2) {#each array as value, idx}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let meta0;
	let meta1;
	let meta2;
	let meta3;
	let meta4;
	let meta5;
	let t0;
	let div0;
	let t1;
	let div1;
	let nav;
	let button0;
	let t2;
	let t3;
	let button1;
	let t4;
	let button1_disabled_value;
	let mounted;
	let dispose;
	let each_value = /*array*/ ctx[2];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			meta0 = element("meta");
			meta1 = element("meta");
			meta2 = element("meta");
			meta3 = element("meta");
			meta4 = element("meta");
			meta5 = element("meta");
			t0 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			div1 = element("div");
			nav = element("nav");
			button0 = element("button");
			t2 = text("Generate");
			t3 = space();
			button1 = element("button");
			t4 = text("Start");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-16ubfqt\"]", document_1.head);
			meta0 = claim_element(head_nodes, "META", { name: true, content: true });
			meta1 = claim_element(head_nodes, "META", { name: true, content: true });
			meta2 = claim_element(head_nodes, "META", { property: true, content: true });
			meta3 = claim_element(head_nodes, "META", { property: true, content: true });
			meta4 = claim_element(head_nodes, "META", { property: true, content: true });
			meta5 = claim_element(head_nodes, "META", { property: true, content: true });
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { id: true, class: true });
			var div1_nodes = children(div1);
			nav = claim_element(div1_nodes, "NAV", { class: true });
			var nav_nodes = children(nav);
			button0 = claim_element(nav_nodes, "BUTTON", { class: true, disabled: true });
			var button0_nodes = children(button0);
			t2 = claim_text(button0_nodes, "Generate");
			button0_nodes.forEach(detach_dev);
			t3 = claim_space(nav_nodes);
			button1 = claim_element(nav_nodes, "BUTTON", { class: true, disabled: true });
			var button1_nodes = children(button1);
			t4 = claim_text(button1_nodes, "Start");
			button1_nodes.forEach(detach_dev);
			nav_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document_1.title = "Bima | Algorithm Visualizer";
			attr_dev(meta0, "name", "description");
			attr_dev(meta0, "content", "Algorithm Visualizer");
			add_location(meta0, file, 168, 2, 4713);
			attr_dev(meta1, "name", "keywords");
			attr_dev(meta1, "content", "Algorithm, Visualizer");
			add_location(meta1, file, 169, 2, 4774);
			attr_dev(meta2, "property", "og:type");
			attr_dev(meta2, "content", "website");
			add_location(meta2, file, 170, 2, 4833);
			attr_dev(meta3, "property", "og:url");
			attr_dev(meta3, "content", "https://bima.priambudi.fyi");
			add_location(meta3, file, 171, 2, 4881);
			attr_dev(meta4, "property", "og:title");
			attr_dev(meta4, "content", "Bima | Algorithm Visualizer");
			add_location(meta4, file, 172, 2, 4947);
			attr_dev(meta5, "property", "og:description");
			attr_dev(meta5, "content", "Algorithm Visualizer");
			add_location(meta5, file, 173, 2, 5016);
			attr_dev(div0, "class", "array-container svelte-1t69iha");
			add_location(div0, file, 176, 0, 5098);
			attr_dev(button0, "class", "nav-button svelte-1t69iha");
			button0.disabled = /*isSorting*/ ctx[0];
			add_location(button0, file, 188, 4, 5338);
			attr_dev(button1, "class", "nav-button svelte-1t69iha");
			button1.disabled = button1_disabled_value = /*isSorted*/ ctx[1] || /*isSorting*/ ctx[0];
			add_location(button1, file, 191, 4, 5442);
			attr_dev(nav, "class", "svelte-1t69iha");
			add_location(nav, file, 187, 2, 5328);
			attr_dev(div1, "id", "nav-wrapper");
			attr_dev(div1, "class", "svelte-1t69iha");
			add_location(div1, file, 186, 0, 5303);
		},
		m: function mount(target, anchor) {
			append_dev(document_1.head, meta0);
			append_dev(document_1.head, meta1);
			append_dev(document_1.head, meta2);
			append_dev(document_1.head, meta3);
			append_dev(document_1.head, meta4);
			append_dev(document_1.head, meta5);
			insert_dev(target, t0, anchor);
			insert_dev(target, div0, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			insert_dev(target, t1, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, nav);
			append_dev(nav, button0);
			append_dev(button0, t2);
			append_dev(nav, t3);
			append_dev(nav, button1);
			append_dev(button1, t4);

			if (!mounted) {
				dispose = [
					listen_dev(button0, "click", /*resetArray*/ ctx[4], false, false, false),
					listen_dev(button1, "click", /*click_handler*/ ctx[6], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*ARRAY_BARS_WIDTH, array*/ 4) {
				each_value = /*array*/ ctx[2];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*isSorting*/ 1) {
				prop_dev(button0, "disabled", /*isSorting*/ ctx[0]);
			}

			if (dirty & /*isSorted, isSorting*/ 3 && button1_disabled_value !== (button1_disabled_value = /*isSorted*/ ctx[1] || /*isSorting*/ ctx[0])) {
				prop_dev(button1, "disabled", button1_disabled_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			detach_dev(meta0);
			detach_dev(meta1);
			detach_dev(meta2);
			detach_dev(meta3);
			detach_dev(meta4);
			detach_dev(meta5);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div0);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div1);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const ANIMATION_SPEED_MS = 20;
const ARRAY_BARS_WIDTH = 20;
const PRIMARY_BAR_COLOR = "turquoise";
const SECONDARY_BAR_COLOR = "#F80";

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Routes", slots, []);
	const MIN_VALUE = isMobile() ? 15 : 5;
	const NUMBER_OF_ARRAY_BARS = isMobile() ? 15 : 25;
	let isSorting = false;
	let isSorted = false;

	let options = [
		{ value: "bubble", text: "Bubble" },
		{ value: "heap", text: "Heap" },
		{ value: "insertion", text: "Insertion" },
		{ value: "intro", text: "Intro" },
		{ value: "merge", text: "Merge" },
		{ value: "quick", text: "Quick" }
	];

	let selected = "bubble";

	let array = [
		100,
		70,
		240,
		140,
		110,
		160,
		270,
		200,
		280,
		250,
		260,
		50,
		120,
		150,
		80,
		90,
		180,
		190,
		60,
		220,
		130,
		230,
		290,
		210,
		170
	];

	onMount(() => {
		if (isMobile()) resetArray();
	});

	function doJump() {
		const arrayBars = document.getElementsByClassName("array-bar");

		(function myLoop(i, idx = 0) {
			setTimeout(
				function () {
					arrayBars[idx++].classList.add("jump");

					if (--i) {
						myLoop(i, idx++);
					} else {
						$$invalidate(0, isSorting = false);
						$$invalidate(1, isSorted = true);
						document.getElementById("nav-wrapper").style.transform = "translate(-50%, 0%)";
					}
				},
				100
			);
		})(arrayBars.length);
	}

	function resetArray() {
		if (isSorting) return;
		const arrayTemp = [];
		const arrayBars = document.getElementsByClassName("array-bar");

		for (let i = 0; i < arrayBars.length; i++) {
			arrayBars[i].classList.add("reset");
		}

		Promise.all([import('./randomIntFromInterval.c6ff857c.js'), ]).then(function(x) { return x[0]; }).then(module => {
			while (arrayTemp.length < NUMBER_OF_ARRAY_BARS) {
				let r = module.default(MIN_VALUE, NUMBER_OF_ARRAY_BARS + MIN_VALUE - 1);
				if (arrayTemp.indexOf(r) === -1) arrayTemp.push(r);
			}

			for (let i = 0; i < arrayBars.length; i++) {
				arrayBars[i].classList.remove("jump");
			}

			$$invalidate(0, isSorting = false);
			$$invalidate(1, isSorted = false);
			$$invalidate(2, array = arrayTemp);
		});
	}

	function doSort(animations) {
		let isChange = false;
		const arrayBars = document.getElementsByClassName("array-bar");

		for (let i = 0; i < animations.length; i++) {
			const isColorChange = animations[i][2];

			if (isColorChange) {
				isChange = !isChange;
				const [barOneIdx, barTwoIdx] = animations[i];
				const barOneStyle = arrayBars[barOneIdx].style;
				const barTwoStyle = arrayBars[barTwoIdx].style;
				const color = isChange ? SECONDARY_BAR_COLOR : PRIMARY_BAR_COLOR;

				setTimeout(
					() => {
						barOneStyle.backgroundColor = color;
						barTwoStyle.backgroundColor = color;
					},
					i * ANIMATION_SPEED_MS
				);
			} else {
				setTimeout(
					() => {
						const [barOneIdx, newHeight] = animations[i];
						const barOneStyle = arrayBars[barOneIdx].style;
						barOneStyle.height = `${newHeight}px`;
					},
					i * ANIMATION_SPEED_MS
				);
			}
		}

		setTimeout(
			() => {
				doJump();
			},
			animations.length * ANIMATION_SPEED_MS
		);
	}

	function parseSortNameToFunc(name) {
		if (isSorting || isSorted) return;
		$$invalidate(0, isSorting = true);
		const arrayBars = document.getElementsByClassName("array-bar");
		document.getElementById("nav-wrapper").style.transform = "translate(-50%, 200%)";

		for (let i = 0; i < arrayBars.length; i++) {
			arrayBars[i].classList.remove("reset");
		}

		switch (name) {
			case "merge":
				Promise.all([import('./mergeSort.3eb9e27e.js'), ]).then(function(x) { return x[0]; }).then(fun => {
					doSort(fun.getMergeSortAnimations(array));
				});
				break;
			case "bubble":
				Promise.all([import('./bubbleSort.9f7901ae.js'), ]).then(function(x) { return x[0]; }).then(fun => {
					doSort(fun.getBubbleSortAnimations(array));
				});
				break;
			case "insertion":
				Promise.all([import('./insertionSort.0c1b1218.js'), ]).then(function(x) { return x[0]; }).then(fun => {
					doSort(fun.getInsertionSortAnimations(array));
				});
				break;
			case "heap":
				Promise.all([import('./heapSort.831e56cb.js'), ]).then(function(x) { return x[0]; }).then(fun => {
					doSort(fun.getHeapSortAnimations(array));
				});
				break;
			case "quick":
				Promise.all([import('./quickSort.446f8d33.js'), ]).then(function(x) { return x[0]; }).then(fun => {
					doSort(fun.getQuickSortAnimations(array));
				});
				break;
			case "intro":
				Promise.all([import('./introSort.610438ff.js'), ]).then(function(x) { return x[0]; }).then(fun => {
					doSort(fun.getIntroSortAnimations(array));
				});
				break;
		}
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	const click_handler = () => parseSortNameToFunc(selected);

	$$self.$capture_state = () => ({
		onMount,
		isMobile,
		ANIMATION_SPEED_MS,
		MIN_VALUE,
		NUMBER_OF_ARRAY_BARS,
		ARRAY_BARS_WIDTH,
		PRIMARY_BAR_COLOR,
		SECONDARY_BAR_COLOR,
		isSorting,
		isSorted,
		options,
		selected,
		array,
		doJump,
		resetArray,
		doSort,
		parseSortNameToFunc
	});

	$$self.$inject_state = $$props => {
		if ("isSorting" in $$props) $$invalidate(0, isSorting = $$props.isSorting);
		if ("isSorted" in $$props) $$invalidate(1, isSorted = $$props.isSorted);
		if ("options" in $$props) options = $$props.options;
		if ("selected" in $$props) $$invalidate(3, selected = $$props.selected);
		if ("array" in $$props) $$invalidate(2, array = $$props.array);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		isSorting,
		isSorted,
		array,
		selected,
		resetArray,
		parseSortNameToFunc,
		click_handler
	];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
